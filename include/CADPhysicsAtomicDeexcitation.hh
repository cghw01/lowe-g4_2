// CADPhysicsAtomicDeexcitation.hh

// Atomic deexcitation 'process', based on G4AtomicDeexcitation, with two main modifications:
// 1) New Auger transitions can now go to *BOTH* vacancies left behind by the previous transition
// 2) New method GetVacancyEnergies, returning a vector of doubles representing the energies of remaining vacancies
// (for the benefit of CADPhysicsDI, which can generate holes from them)
//
// Furthermore, the code has been extensively rewritten to improve clarity and comments have been added.

#ifndef CADPhysicsAtomicDeexcitation_h
#define CADPhysicsAtomicDeexcitation_h 1

#include "globals.hh"
#include <vector>
#include "G4DynamicParticle.hh"
#include "G4AtomicTransitionManager.hh"
#include "CADPhysicsUnits.hh"

class CADPhysicsAtomicDeexcitation {

public:

	CADPhysicsAtomicDeexcitation();
	~CADPhysicsAtomicDeexcitation();

	std::vector<G4DynamicParticle*>* GenerateParticles(G4int Z, G4int shellId);
	// Return a vector containing all particles generated by fluorescence (photons)
	// and/or Auger processes (electrons) starting from a given shell identified by its ID

	// Two methods to set energy cuts (threshold energies):
	// Note: these energy cuts aren't used anywhere in the code! (The same is true for the 
	// original G4AtomicDeexcitation.) However, CADPhysicsLowEnergyIonisation does call these methods and therefore
	// they cannot be simply removed.
	inline void SetCutForSecondaryPhotons(G4double cut) { minGammaEnergy = cut; }// for fluorescence
	inline void SetCutForAugerElectrons(G4double cut) { minElectronEnergy = cut; }// for Auger

	inline void ActivateAugerElectronProduction(G4bool val) { fAuger = val; }
	// Set the switch for generation of Auger electrons

	std::vector<G4double> GetVacancyEnergies();
	// Return a vector of energies of the remaining vacancies of the atom 
	// after completion of all fluorescence/Auger transitions

private:

	G4int SelectTypeOfTransition(G4int Z, G4int shellId);
	// Decide wether a radiative transition is possible from a given shell and, if it is,
	// return the ID of the upper shell for the transition. Returns zero otherwise.

	G4DynamicParticle* GenerateFluorescence(G4int Z, G4int shellId,G4int provShellId);
	// Return a particle from a given radiative transition defined by shellID (ID of the lower
	// shell) and provShellId (ID of the higher shell).

	G4DynamicParticle* GenerateAuger(G4int Z, G4int shellId);
	// Return a particle from a non-radiative transition

	void PushEnergy(G4int Z, G4int shellId);

	G4double minGammaEnergy;
	G4double minElectronEnergy;
	G4bool   fAuger;

	G4int augerVacancyId;// Data member wich stores the id of the shell where a vacancy 
	// is left after the Auger electron

	std::vector<G4double> VacancyEnergies;
	std::vector<G4int> ShellIdstobeprocessed;
	const G4AtomicTransitionManager*  transitionManager; 
};

inline std::vector<G4double> CADPhysicsAtomicDeexcitation::GetVacancyEnergies() {
	std::vector<G4double> ve = VacancyEnergies;
	VacancyEnergies.clear();
	return ve;
}

#endif
